<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TemperatureValue</name>
    </assembly>
    <members>
        <member name="T:Ekstrand.TemperatureScaleTypes">
            <summary>
            Enumeration of temperature scale types.
            </summary>
        </member>
        <member name="T:Ekstrand.Temperature">
            <summary>
            Temperature as a value type.
            </summary>
        </member>
        <member name="F:Ekstrand.Temperature.MaxValue">
            <summary>
            Maximum value for a Temperature.
            </summary>
        </member>
        <member name="F:Ekstrand.Temperature.MinValue">
            <summary>
            Minimum value for a Temperature.
            </summary>
        </member>
        <member name="M:Ekstrand.Temperature.#ctor(System.ValueType)">
            <summary>
            Create a new instance of Temperature with a Celsius value.
            </summary>
            <param name="value">Numeric Value Type in Celsius.</param>
        </member>
        <member name="M:Ekstrand.Temperature.#ctor(Ekstrand.TemperatureScaleTypes)">
            <summary>
            Create a new instance of Temperature with defined temperature scale.
            </summary>
            <param name="value">Enumeration TemperatureTypes</param>
        </member>
        <member name="M:Ekstrand.Temperature.#ctor(System.ValueType,Ekstrand.TemperatureScaleTypes)">
            <summary>
            Create a new instance of Temperature with a value in one of the defined scales.
            </summary>
            <param name="value">Numeric Value Type</param>
            <param name="temp">The scale the given value is in.</param>
        </member>
        <member name="P:Ekstrand.Temperature.TemperatureScale">
            <summary>
            Defined temperature scale.
            </summary>
        </member>
        <member name="P:Ekstrand.Temperature.Value">
            <summary>
            The temperature value in the defined temperature scale.
            </summary>
        </member>
        <member name="P:Ekstrand.Temperature.ValueAsCelsius">
            <summary>
            Returns the temperature value in Celsius scale.
            </summary>
        </member>
        <member name="P:Ekstrand.Temperature.ValueAsFahrenheit">
            <summary>
            Returns the temperature value in Fahrenheit scale.
            </summary>
        </member>
        <member name="P:Ekstrand.Temperature.ValueAsKelvin">
            <summary>
            Returns the temperature value in Kelvin scale.
            </summary>
        </member>
        <member name="P:Ekstrand.Temperature.ValueAsRankine">
            <summary>
            Returns the temperature value in Rankine scale.
            </summary>
        </member>
        <member name="M:Ekstrand.Temperature.Ceiling(Ekstrand.Temperature)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified temperature number.
            </summary>
            <param name="value">A Temperature value type.</param>
            <returns>The smallest integral value that is greater than or equal to <i>value</i>.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Floor(Ekstrand.Temperature)">
            <summary>
            Returns the largest integer less than or equal to the specified temperature number.
            </summary>
            <param name="value">A Temperature value type.</param>
            <returns>The largest integer less than or equal to <i>value</i>.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Byte">
            <summary>
            Converts the Temperature instance to an equivalent Byte value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Decimal">
            <summary>
            Converts the Temperature instance to an equivalent Decimal value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Double">
            <summary>
            Converts the Temperature instance to an equivalent Double value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Int16">
            <summary>
            Converts the Temperature instance to an equivalent Int16 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Int32">
            <summary>
            Converts the Temperature instance to an equivalent Int32 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Int64">
            <summary>
            Converts the Temperature instance to an equivalent Int64 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.SByte">
            <summary>
            Converts the Temperature instance to an equivalent SByte value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.Single">
            <summary>
            Converts the Temperature instance to an equivalent Single value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Byte)~Ekstrand.Temperature">
            <summary>
            Converts the Byte to an equivalent Temperature value.
            </summary>
            <param name="value">Byte value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.SByte)~Ekstrand.Temperature">
            <summary>
            Converts the SByte to an equivalent Temperature value.
            </summary>
            <param name="value">SByte value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.UInt16)~Ekstrand.Temperature">
            <summary>
            Converts the UInt16 to an equivalent Temperature value.
            </summary>
            <param name="value">UInt16 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.UInt32)~Ekstrand.Temperature">
            <summary>
            Converts the UInt32 to an equivalent Temperature value.
            </summary>
            <param name="value">UInt32 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.UInt64)~Ekstrand.Temperature">
            <summary>
            Converts the UInt64 to an equivalent Temperature value.
            </summary>
            <param name="value">UInt64 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Int16)~Ekstrand.Temperature">
            <summary>
            Converts the Int16 to an equivalent Temperature value.
            </summary>
            <param name="value">Int16 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Int32)~Ekstrand.Temperature">
            <summary>
            Converts the Int32 to an equivalent Temperature value.
            </summary>
            <param name="value">Int32 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Int64)~Ekstrand.Temperature">
            <summary>
            Converts the Int64 to an equivalent Temperature value.
            </summary>
            <param name="value">Int64 value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Single)~Ekstrand.Temperature">
            <summary>
            Converts the Single to an equivalent Temperature value.
            </summary>
            <param name="value">Single value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Decimal)~Ekstrand.Temperature">
            <summary>
            Converts the Decimal to an equivalent Temperature value.
            </summary>
            <param name="value">Decimal value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(System.Double)~Ekstrand.Temperature">
            <summary>
            Converts the Double to an equivalent Temperature value.
            </summary>
            <param name="value">Double value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.UInt16">
            <summary>
            Converts the Temperature instance to an equivalent UInt16 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.UInt32">
            <summary>
            Converts the Temperature instance to an equivalent UInt32 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_Implicit(Ekstrand.Temperature)~System.UInt64">
            <summary>
            Converts the Temperature instance to an equivalent UInt64 value.
            </summary>
            <param name="value">Temperature value</param>
        </member>
        <member name="M:Ekstrand.Temperature.op_UnaryNegation(Ekstrand.Temperature)">
            <summary>
             Unary - operation on a temperature type is the temperature negation of the operand.
            </summary>
            <param name="temp">Temperature type</param>
            <returns>Returns the numeric negation.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Subtraction(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Subtract the Right operand from the Left.
            </summary>
            <param name="tempL">Left operand</param>
            <param name="tempR">Right operand</param>
            <returns>Return the subtracted result as Temperature value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Inequality(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            The inequality operator returns false if its operands are equal, true otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the inequality operator boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Multiply(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            The multiplication operator computes the product of its operands
            </summary>
            <param name="tempL">Left operand</param>
            <param name="tempR">Right operand</param>
            <returns>Return the multiplication result in Temperature value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Division(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            The division operator divides its Left operand by its Right operand
            </summary>
            <param name="numerator">Numerator value</param>
            <param name="denominator">Denominator value</param>
            <returns>Return the resulted division operator as Temperature value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_UnaryPlus(Ekstrand.Temperature)">
            <summary>
            Unary + operation on a numeric type is just the value of the operand.
            </summary>
            <param name="temp">Temperature type</param>
            <returns>Returns the value of Temperature.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Addition(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Computes the sum of its two operands.
            </summary>
            <param name="tempL">Left operand</param>
            <param name="tempR">Right operand</param>
            <returns>Return the sum of the two Temperature values.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_LessThan(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Relational operator that returns true if the Left operand is less than the Right, false otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the relational boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_LessThanOrEqual(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Relational operator that returns true if the Left operand is less than or equal to the Right, false otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the relational boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_Equality(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            The equality operator returns true if the values of its operands are equal, false otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the equality boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_GreaterThan(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Relational operator that returns true if the Left operand is greater than the Right, false otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the relational boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.op_GreaterThanOrEqual(Ekstrand.Temperature,Ekstrand.Temperature)">
            <summary>
            Relational operator that returns true if the Left operand is greater than or equal to the Right, false otherwise.
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Return the relational boolean value in comparing Temperatures</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Round(Ekstrand.Temperature)">
            <summary>
            Rounds a temperature value to the nearest integral value.
            </summary>
            <param name="value">A temperature number to be rounded. </param>
            <returns>The temperature nearest <i>value</i>. If the fractional component of <i>value</i> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Round(Ekstrand.Temperature,System.Int32)">
            <summary>
            Rounds a temperature value to a specified number of fractional digits.
            </summary>
            <param name="value">A temperature number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value. </param>
            <returns>The number nearest to <i>value</i> that contains a number of fractional digits equal to digits.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Round(Ekstrand.Temperature,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a temperature value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="value">A temperature number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value. </param>
            <param name="mpd">Specification for how to round value if it is midway between two other numbers.</param>
            <returns>The temperature nearest <i>value</i>. If the fractional component of <i>value</i> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Round(Ekstrand.Temperature,System.MidpointRounding)">
            <summary>
            Rounds a temperature value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="value">A temperature number to be rounded.</param>
            <param name="mpd">Specification for how to round value if it is midway between two other numbers.</param>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Temperature.TryParse(System.String,Ekstrand.Temperature@)">
            <summary>
            Converts the string representation of a number to its double-precision 
            floating-point number equivalent. A return value indicates whether the 
            conversion succeeded or failed.
            </summary>
            <param name="str">A string containing a number to convert. </param>
            <param name="temp">When this method returns, contains the double-precision 
            floating-point number equivalent of the str parameter, if the conversion 
            succeeded, or false if the conversion failed. The conversion fails if the str
            parameter is null or String.Empty, is not a number in a valid format, or 
            represents a number less than MinValue or greater than MaxValue. This parameter 
            is passed uninitialized; any value originally supplied in result will be overwritten. </param>
            <returns></returns>
        </member>
        <member name="M:Ekstrand.Temperature.ChangeScale(Ekstrand.TemperatureScaleTypes)">
            <summary>
            Change the current temperature scale to another.
            </summary>
            <param name="tempType">Enumeration TemperatureScaleTypes</param>
            <remarks>
            Changing the temperature scale would cause the current value to be recalculated at the new scale.
            </remarks>
        </member>
        <member name="M:Ekstrand.Temperature.ChangeScale(System.ValueType,Ekstrand.TemperatureScaleTypes)">
            <summary>
            Change the current temperature value and scale.
            </summary>
            <param name="value">ValueType for temperature.</param>
            <param name="tempType">Enumeration TemperatureTypes</param>
        </member>
        <member name="M:Ekstrand.Temperature.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">Object instance.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.CompareTo(Ekstrand.Temperature)">
            <summary>
            Compares this instance to a specified Temperature and returns an indication of their relative values.
            </summary>
            <param name="other">Temperature instance.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.Equals(Ekstrand.Temperature)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Temperature value. 
            </summary>
            <param name="other">Temperature instance.</param>
            <returns>true if other is an instance of Temperature and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.GetHashCode">
            <summary>
            Serves as the default hash function. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.GetTypeCode">
            <summary>
            Returns the TypeCode for value type Temperature.
            </summary>
            <returns>Returns the TypeCode for value type Temperature.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToBoolean(System.IFormatProvider)">
            <summary>
            This conversion is not supported.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Returns NotSupportedException</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToByte(System.IFormatProvider)">
            <summary>
            This conversion is not supported.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Returns NotSupportedException</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToChar(System.IFormatProvider)">
            <summary>
            This conversion is not supported.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Returns NotSupportedException</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToDateTime(System.IFormatProvider)">
            <summary>
            This conversion is not supported.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Returns NotSupportedException</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return decimal equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider"></param>
            <returns>Return double equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return Int16 equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return Int32 equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return Int64 equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return SBtye equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return float equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToString">
            <summary>
            Return a formatted string of this object.
            </summary>
            <returns>Returns a string representation of this Temperature value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToString(System.String)">
             <summary>
             Return a formatted string of this object.
             </summary>
             <param name="format">String format values.</param>
             <returns>Return a formatted string based on given format value</returns>
            <remarks>
            Format values: \nS for scalar only \nSD for scalar and degree symbol \nN for scalar value only.
            </remarks>
        </member>
        <member name="M:Ekstrand.Temperature.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent String using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return String equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent String using the specified format and culture-specific formatting information.
            </summary>
            <param name="format">String format.</param>
            <param name="formatProvider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>Return String equivalent value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The Type to which the value of this instance is converted. </param>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>An Object instance of type conversionType whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.IsNumeric(System.ValueType)">
            <summary>
            Check if given ValueType is a numeric type.
            </summary>
            <param name="value">ValueType to be type queried.</param>
            <returns>True iff ValueType given is a numeric type otherwise false.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.RescaleFromCelsius(Ekstrand.TemperatureScaleTypes)">
            <summary>
            Rescale from Celsius to any of the supported temperature scales.
            </summary>
            <param name="tempType">TemperatureScaleTypes to rescale to.</param>
            <returns>Returns the internal Celsius value rescaled to the given TemperatureScaleTypes value.</returns>
        </member>
        <member name="M:Ekstrand.Temperature.RescaleToCelsius(System.Double,Ekstrand.TemperatureScaleTypes)">
            <summary>
            Rescale given value to Celsius.
            </summary>
            <param name="value">Double value to be rescaled.</param>
            <param name="tempType">TemperatureScaleType the given value is in.</param>
        </member>
        <member name="T:Ekstrand.TemperatureToStringFormatter">
            <summary>
            Formatter for adding degree symbol and/or degree scale identifier or just the value in string form.
            </summary>
        </member>
        <member name="M:Ekstrand.TemperatureToStringFormatter.#ctor">
            <summary>
            Crate an instance of TemperatureToStringFormatter
            </summary>
        </member>
        <member name="M:Ekstrand.TemperatureToStringFormatter.GetFormat(System.Type)">
            <summary>
            IFormatProvider interface implementation
            </summary>
            <param name="formatType">Type of formatter provider</param>
            <returns>Return the defined formatter otherwise null</returns>
        </member>
        <member name="M:Ekstrand.TemperatureToStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            ICustomFormatter interface implementation.
            </summary>
            <param name="format">string to be formatted.</param>
            <param name="arg">Object reference.</param>
            <param name="formatProvider">FormatProvider to be used.</param>
            <returns>Return a formatted string otherwise null.</returns>
        </member>
    </members>
</doc>
